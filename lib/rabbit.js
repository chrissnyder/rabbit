// Generated by CoffeeScript 1.4.0
(function() {
  var AWS, Rabbit, async, jsdom, request, url,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  async = require('async');

  AWS = require('aws-sdk');

  jsdom = require('jsdom');

  request = require('request');

  url = require('url');

  Rabbit = (function() {

    Rabbit.prototype.project = '';

    Rabbit.prototype.bucket = '';

    Rabbit.prototype.host = 'https://api.zooniverse.org';

    Rabbit.prototype.file = 'index.html';

    Rabbit.prototype.types = ['project'];

    Rabbit.prototype.options = {};

    function Rabbit(params) {
      var property, value, _ref;
      if (params == null) {
        params = {};
      }
      this.createEndpoints = __bind(this.createEndpoints, this);

      this.bucketUrl = __bind(this.bucketUrl, this);

      this.template = __bind(this.template, this);

      this.queryApi = __bind(this.queryApi, this);

      this.save = __bind(this.save, this);

      this.insertData = __bind(this.insertData, this);

      this.getHtml = __bind(this.getHtml, this);

      this.getData = __bind(this.getData, this);

      this.go = __bind(this.go, this);

      for (property in params) {
        if (!__hasProp.call(params, property)) continue;
        value = params[property];
        if (property in this) {
          this[property] = value;
        }
      }
      if ((_ref = this.s3) == null) {
        this.s3 = new AWS.S3({
          accessKeyId: this.options.key || process.env.AMAZON_ACCESS_KEY_ID,
          secretAccessKey: this.options.secret || process.env.AMAZON_SECRET_ACCESS_KEY,
          region: this.options.region || 'us-east-1'
        });
      }
      this.rawHtml = '';
      this.dataResults = {};
      this.loadedHtml = '';
      this.createEndpoints();
    }

    Rabbit.prototype.go = function() {
      var _this = this;
      return async.auto({
        getData: this.getData,
        getHtml: this.getHtml,
        insertData: ['getHtml', 'getData', this.insertData],
        save: ['insertData', this.save]
      }, function(err) {
        if (err != null) {
          console.log(err);
        }
        return console.log("Prefetched " + _this.project);
      });
    };

    Rabbit.prototype.getData = function(callback) {
      var dataType, funcList, _fn, _i, _len, _ref,
        _this = this;
      funcList = {};
      _ref = this.types;
      _fn = function(dataType) {
        return funcList[dataType] = function(callback) {
          return _this.queryApi(dataType, callback);
        };
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dataType = _ref[_i];
        _fn(dataType);
      }
      return async.parallel(funcList, function(err, res) {
        if (err) {
          return callback(err, null);
        } else {
          return callback(null, res);
        }
      });
    };

    Rabbit.prototype.getHtml = function(callback) {
      var _this = this;
      return this.s3.getObject({
        Bucket: this.bucket,
        Key: this.file
      }, function(err, res) {
        if (err) {
          callback(err, null);
          return;
        }
        _this.rawHtml = res.Body.toString();
        return callback(null, _this.rawHtml);
      });
    };

    Rabbit.prototype.insertData = function(callback) {
      var _this = this;
      return jsdom.env(this.rawHtml, function(err, window) {
        var dataEls, datum, document, firstScript, i, key, keyId, scriptTag, _i, _ref, _ref1, _ref2;
        if (err) {
          callback(err, null);
          return;
        }
        document = window.document;
        dataEls = document.querySelectorAll("script[id^=define-zooniverse-prefetch-]");
        for (i = _i = 0, _ref = dataEls.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if ((_ref1 = dataEls[i]) != null) {
            _ref1.parentNode.removeChild(dataEls[i]);
          }
        }
        _ref2 = _this.dataResults;
        for (key in _ref2) {
          datum = _ref2[key];
          keyId = key.replace('_', '-');
          scriptTag = document.createElement('script');
          scriptTag.setAttribute('type', 'text/javascript');
          scriptTag.id = "define-zooniverse-prefetch-" + keyId;
          scriptTag.innerHTML = _this.template(key, datum);
          firstScript = document.body.querySelector('script');
          if (firstScript) {
            document.body.insertBefore(scriptTag, firstScript);
          } else {
            document.head.insertBefore(scriptTag, document.head.firstChild);
          }
        }
        _this.loadedHtml = "<!DOCTYPE html>\n" + document.documentElement.outerHTML;
        return callback(null, _this.loadedHtml);
      });
    };

    Rabbit.prototype.save = function(callback) {
      var buffer;
      buffer = new Buffer(this.loadedHtml);
      return this.s3.putObject({
        Bucket: this.bucket,
        Key: this.file,
        ACL: 'public-read',
        Body: buffer,
        ContentType: 'text/html'
      }, function(err, res) {
        if (err) {
          callback(err, null);
          return;
        }
        return callback(null, res);
      });
    };

    Rabbit.prototype.queryApi = function(type, callback) {
      var requestUrl,
        _this = this;
      requestUrl = url.resolve(this.host, this.endpoints[type].endpoint);
      return request.get(requestUrl, {
        strictSSL: false
      }, function(err, res, body) {
        if (!err && res.statusCode === 200) {
          _this.dataResults[type] = body;
          return callback(null, _this.dataResults[type]);
        } else {
          return callback(err, null);
        }
      });
    };

    Rabbit.prototype.template = function(dataType, data) {
      return "window.DEFINE_ZOONIVERSE_" + (dataType.toUpperCase()) + " = " + data;
    };

    Rabbit.prototype.bucketUrl = function() {
      if (this.bucket === 'zooniverse-demo') {
        return url.resolve("http://zooniverse-demo.s3-website-us-east-1.amazonaws.com/", this.file);
      } else {
        return url.resolve("http://" + this.bucket, this.file);
      }
    };

    Rabbit.prototype.createEndpoints = function() {
      return this.endpoints = {
        project: {
          endpoint: "/projects/" + this.project
        },
        project_groups: {
          endpoint: "/projects/" + this.project + "/groups"
        }
      };
    };

    return Rabbit;

  })();

  module.exports = Rabbit;

}).call(this);
